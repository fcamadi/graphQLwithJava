type Query {
    countries(criteria: CountryCriteria): [Country]
    country(criteria: ProvinceCriteria): Country
    provinces(criteria: ProvinceCriteria): [Province]
    places(criteria: PlaceCriteria): [Place]
}

scalar Surface

input IntRange {
    above: Int
    below: Int
}

input PlaceCriteria {
    name: String
}

input CountryCriteria {
    continent: Continent
    populationRange: IntRange
}

input ProvinceCriteria {
    country: String
    populationRange: IntRange
}

enum Continent {
    Europe
    Asia
    Africa
    SouthAmerica
    NorthAmerica
    Oceania
}

type Country {
    code: ID!
    name: String!
    population: Int
    area: Surface
    capital: City
    provinces: [Province!]
}

type City {
    name: String!
    population: Int
    geoLocation: GeoCoord
    elevation: Int
    province: Province
}

type Province {
    name: String!
    population: Int
    capital: City
    area: Int
}

type GeoCoord {
    latitude: Float!
    longitude: Float!
}

union Place = Country | Province | City